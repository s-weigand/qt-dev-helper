from __future__ import annotations

import re
from pathlib import Path

from tests import EXPECTED_TEST_DATA
from tests import INPUT_TEST_DATA

from qt_dev_helper.config import Config
from qt_dev_helper.transpiler import compile_resource_file
from qt_dev_helper.transpiler import compile_ui_file
from qt_dev_helper.transpiler import transpile_sass

COMMENT_BLANK_LINE_PATTERN = re.compile(r"(\n\s*|\s*[/]{2}.+?)\n")
HEADER_PATTERN = re.compile(
    r"(/[*]{10,}.+[*]{10,}/|# -[*]- coding.+?WARNING! All changes.+?#{10,}\n)", re.DOTALL
)


def clean_text(text: str) -> str:
    """Helper function to clean autogenerated files before comparing."""
    text = re.sub(HEADER_PATTERN, "\n", text)
    return re.sub(COMMENT_BLANK_LINE_PATTERN, "\n", text)


def generated_files_equal(result: Path, expected: Path):
    """Compare generated files."""
    assert clean_text(result.read_text()) == clean_text(
        expected.read_text()
    ), f"{result=}\n{expected=}"


def test_transpile_sass(tmp_path: Path, dummy_config: Config):
    """Transpiling scss gives the expected result."""

    expected = (EXPECTED_TEST_DATA / "theme.qss").read_text()

    out_file = transpile_sass(INPUT_TEST_DATA / "styles/theme.scss", tmp_path / "theme.qss")

    assert out_file.read_text(encoding="utf8") == expected

    out_file = transpile_sass(*dummy_config.root_style_paths())

    assert out_file.read_text(encoding="utf8") == expected


def test_tranpile_ui_file(dummy_config: Config):
    """Create python or cpp header from ui file."""
    tmp_path = dummy_config.base_path

    ui_file = tmp_path / "assets/ui_files/minimal.ui"
    result1 = compile_ui_file(ui_file, tmp_path / "default.py")

    generated_files_equal(result1, EXPECTED_TEST_DATA / "minimal.py")

    result2 = compile_ui_file(ui_file, tmp_path / "default_no_from.py", form_import=False)

    generated_files_equal(result2, (EXPECTED_TEST_DATA / "minimal_no_from_imports.py"))

    result3 = compile_ui_file(ui_file, tmp_path / "minimal.h", generator="cpp")

    generated_files_equal(result3, EXPECTED_TEST_DATA / "minimal.h")


def test_tranpile_resource_file(dummy_config: Config):
    """Create python or cpp header from ui file."""
    tmp_path = dummy_config.base_path
    qrc_file = tmp_path / "assets/test_resource.qrc"
    result1 = compile_resource_file(qrc_file, tmp_path / "resource.py")

    assert "qt_resource_data" in result1.read_text()
    assert "qt_resource_name" in result1.read_text()
    assert "qt_resource_struct" in result1.read_text()

    result2 = compile_resource_file(qrc_file, tmp_path / "resource.h", generator="cpp")

    assert "static const unsigned char qt_resource_data[]" in result2.read_text()
    assert "static const unsigned char qt_resource_name[]" in result2.read_text()
    assert "static const unsigned char qt_resource_struct[]" in result2.read_text()
